# MIT License
#
# Copyright (c) 2022 Graur Andrew
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+package org.eolang.hamcrest
+alias sprintf org.eolang.txt.sprintf
+rt jvm org.eolang:eo-hamcrest:0.0.0

# Main object for assertions
[actual matcher reasons...] > assert-that

  if. > @
    matcher.match actual
    TRUE
    sprintf
      "%s Expected: <%s> but %s"
      if.
        reasons.is-empty
        ""
        reasons.get 0
      actual
      matcher.describe

  # Is the value equal to another value
  [x] > equal-to

    [a] > match
      eq. > @
        x
        a

    [] > describe
      sprintf > @
        "was <%s>"
        x

  # Calculates the logical negation of a matcher
  [matcher] > not

    [a] > match
      not. > @
        ^.matcher.match a

    [] > describe
      sprintf > @
        "not <%s>"
        ^.matcher.describe

  # Calculates the logical conjunction of multiple matchers.
  # Evaluation is shortcut, so subsequent matchers are not called
  # if an earlier matcher returns false.
  [matchers...] > all-of

    [a] > match
      memory > i
      seq > @
        i.write 0
        while.
          i.less ((matchers.length).div 1)
          if.
            mi.match ^.^.a
            i.write (i.add 1)
            seq
              i.write (m.length.add 1)

    [] > describe
      "a lot of matchers" > @





